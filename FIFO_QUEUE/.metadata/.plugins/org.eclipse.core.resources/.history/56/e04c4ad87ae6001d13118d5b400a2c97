/*
 * fifo.c
 *
 *  Created on: Apr 29, 2023
 *      Author: Ahmed Yasser
 */
#include "fifo.h"

FIFO_Buf_t_status FIFO_init	(FIFO_Buf_t* fifo, ELEMENT_TYPE* buf, uint32_t length)
{
	if(buf == NULL)
		return FIFO_NULL;
	fifo->base = buf;
	fifo->head;
	fifo->length = length;
	fifo->count = 0;
	fifo->tail = buf;
	return FIFO_no_err;
}
FIFO_Buf_t_status FIFO_enqueue(FIFO_Buf_t* fifo, ELEMENT_TYPE item)
{
	if(!fifo->base || !fifo->head || !fifo->tail )
		return FIFO_NULL;
	if(FIFO_IS_FULL(fifo) == FIFO_full)
		return FIFO_full;
	*(fifo->head) = item;
	// Circular FIFO
	if( fifo->head == (fifo->base) + (fifo->length * sizeof(ELEMENT_TYPE)))
		fifo->head = fifo->base;
	fifo->head ++;
	fifo->count ++;


}
FIFO_Buf_t_status FIFO_dequeue(FIFO_Buf_t* fifo, ELEMENT_TYPE* item);


FIFO_Buf_t_status FIFO_IS_FULL(FIFO_Buf_t* fifo)
{
	if(!fifo->base || !fifo->head || !fifo->tail )
			return FIFO_NULL;
	if(fifo->count == fifo->length)
		return FIFO_full;
	return FIFO_no_err;
}



void FIFO_print(FIFO_Buf_t* fifo);


